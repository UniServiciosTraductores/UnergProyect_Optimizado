<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://kit.fontawesome.com/64d58efce2.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <link rel="shortcut icon" href="/images/blockchain-development-icon.svg">
  <title>¡Bienvenido!</title>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.3.0/dist/web3.min.js"></script>
</head>

<body>
  <div class="container">
    <div class="forms-container">
      <div class="signin-signup">
        <form action="/login" method="POST" class="sign-in-form" id="loginForm">
          <img src="/images/unerg-logo.svg" alt="" class="blockchain-png">
          <h2 class="title">Iniciar sesión</h2>
          <div class="input-field">
            <i class="fas fa-envelope"></i>
            <input type="email" placeholder="Correo electrónico" name="email" autocomplete="off" required />
          </div>
          <div class="input-field">
            <i class="fas fa-id-card"></i>
            <input type="text" placeholder="Cédula de Identidad" name="password" required pattern="^(V)-\d{7,8}$"
              title="La contraseña debe ser una cédula de identidad venezolana válida (e.g., V-12345678)."
              autocomplete="off" maxlength="10" />
          </div>
          <input type="submit" value="Enviar" class="btn solid" />
        </form>
        <form action="/register" method="POST" class="sign-up-form" id="registerForm">
          <img src="/images/unerg-logo.svg" alt="" class="blockchain-png">
          <h2 class="title">Registrate</h2>
          <div class="input-field">
            <i class="fas fa-user"></i>
            <input type="text" placeholder="Nombre de usuario" name="username" required autocomplete="off"
              id="username" />
          </div>
          <div class="input-field">
            <i class="fas fa-envelope"></i>
            <input type="email" placeholder="Correo electrónico" name="email" required autocomplete="off" id="email" />
          </div>
          <div class="input-field">
            <i class="fas fa-id-card"></i>
            <input type="text" placeholder="Cédula de Identidad" name="password" type="password"
              placeholder="Contraseña" name="password" required pattern="^(V)-\d{7,8}$"
              title="La contraseña debe ser una cédula de identidad venezolana válida (e.g., V-12345678)."
              autocomplete="off" maxlength="10" id="password" />
          </div>
          <input type="submit" class="btn register" value="Enviar" id="btn-register" />
        </form>
      </div>
    </div>

    <div class="panels-container">
      <div class="panel left-panel">
        <div class="content">
          <h3>¿ Eres nuevo ?</h3>
          <button class="btn background" id="sign-up-btn">
            Registrarse
          </button>
        </div>
        <img src="/images/log.svg" class="image" alt="" />
      </div>
      <div class="panel right-panel">
        <div class="content">
          <h3>¿Eres uno de nosotros?</h3>
          <button class="btn background" id="sign-in-btn">
            Iniciar sesión
          </button>
        </div>
        <img src="/images/register.svg" class="image" alt="" />
      </div>
    </div>
  </div>
  <script src="/javascripts/app.js"></script>
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>

  </script>

  <script>

    const registerForm = document.getElementById('registerForm')
    document.addEventListener('DOMContentLoaded', async () => {
      const checkMetaMask = async () => {
        if (typeof window.ethereum == 'undefined') {
          Swal.fire({
            title: "¿Tienes MetaMask?",
            text: "Asegúrate de tener MetaMask instalado en tus extensiones de navegador.",
            icon: "question",
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
          });
          return null;
        }
        return true
      };


      const checkMetamaskBoolean = await checkMetaMask();
      registerForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        if (checkMetamaskBoolean === true) {
          try {

            console.log("Mostrando alerta de espera");
            Swal.fire({
              title: "Por favor, espera",
              text: "Procesando tu solicitud...",
              icon: "info",
              showConfirmButton: false,
              allowOutsideClick: false,
              allowEscapeKey: false,
              didOpen: () => {
                Swal.showLoading();
              }
            });



            // Captura los datos del formulario
            const formData = new FormData(registerForm);
            const username = formData.get('username');
            const email = formData.get('email');
            const password = formData.get('password');


            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            const metaMaskAddress = accounts[0]

            const data = {
              username: username,
              email: email,
              password: password,
              metaMaskAddress: metaMaskAddress
            };
            // Envía los datos al backend

            // Envía los datos al backend
            const response = await fetch('/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            });

            const result = await response.json();
            // Ocultar alerta de "Espera"
            Swal.close();

            if (response.ok) {
              Swal.fire({
                title: "Registro exitoso",
                text: result.message,
                icon: "success",
                showConfirmButton: false,
                timer: 2500
              }).then(() => {
                location = '/';
              });

            } else {
              Swal.fire({
                title: "Hubo un problema",
                text: result.error,
                icon: "error",
                showConfirmButton: false,
                timer: 2500
              });
            }


          } catch (error) {
            // Ocultar alerta de "Espera" en caso de error
            console.log("Error en la solicitud", error);
            Swal.close();
            Swal.fire({
              title: "Hubo un problema!",
              text: "Rechazaste la conexión a tú cuenta de Metamask.",
              icon: "error",
              showConfirmButton: false,
              timer: 2500
            });
          }

        }
      })
    });

    const loginForm = document.getElementById('loginForm');

    loginForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      try {
        // Mostrar alerta de "Espera"
        Swal.fire({
          title: "Por favor, espera",
          text: "Procesando tu solicitud...",
          icon: "info",
          showConfirmButton: false,
          allowOutsideClick: false,
          allowEscapeKey: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        // Captura los datos del formulario
        const formData = new FormData(loginForm);
        const email = formData.get('email');
        const password = formData.get('password');

        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
        const metaMaskAddress = accounts[0];

        const data = {
          email: email,
          password: password,
          metaMaskAddress: metaMaskAddress,
        };

        // Envía los datos al backend
        const response = await fetch('/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        // Espera la respuesta y convierte a JSON
        const result = await response.json();
        // Ocultar alerta de "Espera"
        Swal.close();

        if (response.ok) {
          Swal.fire({
            title: "Inicio de sesión exitoso",
            icon: "success",
            showConfirmButton: false,
            timer: 2500
          }).then(() => {
           location = '/';
          });
        } else {
          Swal.fire({
            title: "Hubo un problema",
            text: result.error,
            icon: "error",
            showConfirmButton: false,
            timer: 2500
          });
        }
      } catch (error) {
        // Ocultar alerta de "Espera" en caso de error
        Swal.close();

        Swal.fire({
          title: "Hubo un problema",
          text: "Rechazaste la conexión a tu cuenta de Metamask.",
          icon: "error",
          showConfirmButton: false,
          timer: 2500
        });
      }
    });




  </script>


</body>

</html>